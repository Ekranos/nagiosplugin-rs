var N = null;var searchIndex = {};
searchIndex["nagiosplugin"]={"doc":"The nagiosplugin crate provides some basic utilities to make it easier to write nagios checks.","items":[[3,"Resource","nagiosplugin","A Resource basically represents a single service if you view it from the perspective of nagios. If you init it without a state it will determine one from the given metrics.",N,N],[3,"PartialOrdMetric","","A PartialOrdMetric is a metric which will automatically calculate the State based on the given value and warning and/or critical value.",N,N],[3,"SimpleMetric","","Represents a simple metric where no logic is performed. You give some values in and the same get out.",N,N],[4,"State","","Represents a service state from nagios.",N,N],[13,"Ok","","",0,N],[13,"Warning","","",0,N],[13,"Critical","","",0,N],[13,"Unknown","","",0,N],[8,"ResourceMetric","","Represents a single metric of a resource. You shouldn't need to implement this by yourself since the crate provided types already implement this.",N,N],[10,"perf_string","","",1,[[["self"]],["string"]]],[10,"name","","",1,[[["self"]],["str"]]],[10,"state","","",1,[[["self"]],["option",["state"]]]],[8,"ToPerfString","","The purpose of ToPerfString is only so one can define custom representations of custom types without using the ToString trait so we don't interfere with that.",N,N],[10,"to_perf_string","","",2,[[["self"]],["string"]]],[8,"Metric","","This trait can be implemented for any kind of metric and will be used to generate the final string output for nagios. Calls to the functions should return immediately and not query the service every time.",N,N],[16,"Output","","",3,N],[10,"name","","",3,[[["self"]],["str"]]],[10,"state","","",3,[[["self"]],["option",["state"]]]],[10,"value","","",3,N],[10,"warning","","",3,[[["self"]],["option"]]],[10,"critical","","",3,[[["self"]],["option"]]],[10,"min","","",3,[[["self"]],["option"]]],[10,"max","","",3,[[["self"]],["option"]]],[11,"new","","If state is set to Some(State) then it will always use this instead of determining it from the given metrics.",4,[[["option",["state"]],["option",["str"]]],["resource"]]],[11,"push","","Pushes a single ResourceMetric into the resource.",4,[[["self"],["m"]]]],[11,"metrics","","Returns a slice of the pushed metrics.",4,N],[11,"set_state","","",4,[[["self"],["state"]]]],[11,"to_nagios_string","","Returns a string which nagios understands to determine the service state.",4,[[["self"]],["string"]]],[11,"get_state","","Will determine a State by the given metrics.",4,[[["self"]],["state"]]],[11,"get_description","","Get the description of this resource.",4,[[["self"]],["option",["string"]]]],[11,"set_description","","Set the description of this resource.",4,[[["self"],["str"]]]],[11,"exit_code","","Will return the exit code of the determined state via Self::state.",4,[[["self"]],["i32"]]],[11,"print_and_exit","","Will print Self::to_nagios_string and exit with the exit code from Self::exit_code",4,[[["self"]]]],[11,"default","","",4,[[],["self"]]],[11,"clone","","",0,[[["self"]],["state"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["state"]],["bool"]]],[11,"exit_code","","Returns the corresponding nagios exit code to signal the service state of self.",0,[[["self"]],["i32"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"partial_cmp","","",0,[[["self"],["state"]],["option",["ordering"]]]],[11,"new","","Creates a new PartialOrdMetric from the given values.",5,[[["str"],["t"],["option"],["option"],["option"],["option"],["bool"]],["self"]]],[11,"name","","",5,[[["self"]],["str"]]],[11,"state","","",5,[[["self"]],["option",["state"]]]],[11,"value","","",5,N],[11,"warning","","",5,[[["self"]],["option"]]],[11,"critical","","",5,[[["self"]],["option"]]],[11,"min","","",5,[[["self"]],["option"]]],[11,"max","","",5,[[["self"]],["option"]]],[11,"clone","","",6,[[["self"]],["simplemetric"]]],[11,"new","","",6,[[["str"],["option",["state"]],["t"],["option"],["option"],["option"],["option"]],["self"]]],[11,"name","","",6,[[["self"]],["str"]]],[11,"state","","",6,[[["self"]],["option",["state"]]]],[11,"value","","",6,N],[11,"warning","","",6,[[["self"]],["option"]]],[11,"critical","","",6,[[["self"]],["option"]]],[11,"min","","",6,[[["self"]],["option"]]],[11,"max","","",6,[[["self"]],["option"]]],[14,"resource","","Let's you simply create a resource from multiple metrics. It's a bit like the vec! macro. `rust # #[macro_use] # extern crate nagiosplugin; # # use nagiosplugin::{SimpleMetric, State}; # # fn main() { let m1 = SimpleMetric::new(\"test\", Some(State::Ok), 12, None, None, None, None); let m2 = SimpleMetric::new(\"other\", None, true, None, None, None, None); let resource = resource![m1, m2]; # }`",N,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"perf_string","","",5,[[["self"]],["string"]]],[11,"name","","",5,[[["self"]],["str"]]],[11,"state","","",5,[[["self"]],["option",["state"]]]],[11,"to_perf_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"perf_string","","",6,[[["self"]],["string"]]],[11,"name","","",6,[[["self"]],["str"]]],[11,"state","","",6,[[["self"]],["option",["state"]]]],[11,"to_perf_string","","",6,[[["self"]],["string"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"State"],[8,"ResourceMetric"],[8,"ToPerfString"],[8,"Metric"],[3,"Resource"],[3,"PartialOrdMetric"],[3,"SimpleMetric"]]};
initSearch(searchIndex);
